server:
  netty:
    # Port the server listens on
    port: 8080
    origin:
      pattern: ^.*$
  polling:
    # After 10 seconds, if no events were sent, the long-polling request will return with no events
    timeout: 10000
    # After 60 seconds, if there is no long-polling request received for a given channel - it will be removed
    channelTimeout: 60000
  session:
    # 5 minutes = 5 * 60 * 1000
    timeout: 300000
  chat:
    urlPrefix: /gemp-lotr-server/chat
  login:
    url: /gemp-lotr-server/login
  register:
    url: /gemp-lotr-server/register
  passwordReset:
    url: /gemp-lotr-server/passwordReset
  passwordResetValidate:
    url: /gemp-lotr-server/passwordResetValidate
  changeEmail:
    url: /gemp-lotr-server/changeEmail
  changeEmailValidate:
    url: /gemp-lotr-server/changeEmail
  banPlayer:
    url: /gemp-lotr-server/banUser
  banPlayers:
    url: /gemp-lotr-server/banMultiple
  banPlayerTemporarily:
    url: /gemp-lotr-server/banUserTemp
  unbanPlayer:
    url: /gemp-lotr-server/unBanUser
  getPlayerRoles:
    url: /gemp-lotr-server/getPlayerRoles
  setPlayerRoles:
    url: /gemp-lotr-server/setPlayerRoles
  delivery:
    url: /gemp-lotr-server/delivery
  collection:
    urlPrefix: /gemp-lotr-server/collection
  tournament:
    urlPrefix: /gemp-lotr-server/tournament

parameterNames:
  actAsParameter: participantId
  pollId: pollId

db:
  connection:
    class: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://db:3306/gemp_db
    username: gempuser
    password: gemppassword
    validateQuery: /* ping */ select 1
    batch: false

update:
  frequency: 100

roles:
  default: u
  admin: a
  leagueAdmin: l
  playTester: p
  commentator: c
  unbanned: n
  user: u

collection:
  filter:
    defaultSort: name

games:
  threadCount: 5
  lingerTime: 300000 # 5 minutes

tournament:
  linger:
    hours: 48
  composite:
    type: composite